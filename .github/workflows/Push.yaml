name: Push

on:
  push:
    branches: [ ffb,bogota,hasenbergl,muenchen,freising,test_travis,github-actions,crunchy ]

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v2
      - name: Perform docker login
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Get changed files 
        id: get_file_changes
        uses: trilom/file-changes-action@v1.2.4
        with:
          output: ' '
      - name: Install tools
        run: |
          wget https://github.com/mozilla/sops/releases/download/v3.7.1/sops_3.7.1_amd64.deb
          sudo dpkg -i sops_3.7.1_amd64.deb
          sops -v 
      - name: Release changed client
        if: contains(steps.get_file_changes.outputs.files, 'app/client') || contains(github.event.head_commit.message, 'trigger build')
        run: make release-docker-image -e COMPONENT=client
      - name: Release changed api
        if: contains(steps.get_file_changes.outputs.files, 'app/api') || contains(github.event.head_commit.message, 'trigger build')
        run: make release-docker-image -e COMPONENT=api
      - name: Release changed cron
        if: contains(steps.get_file_changes.outputs.files, 'app/cron') || contains(github.event.head_commit.message, 'trigger build')
        run: make release-docker-image-app-context -e COMPONENT=cron 
      - name: Release changed database
        if: contains(steps.get_file_changes.outputs.files, 'app/database') || contains(github.event.head_commit.message, 'trigger build')
        run: | 
          docker build -f app/database/Dockerfile --pull -t goatcommunity/crunchy-goat-empeek app
          docker push goatcommunity/crunchy-goat-empeek
  deploy:
    runs-on: ubuntu-latest
    needs: [release]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v2
      - name: Perform docker login
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Get changed files 
        id: get_file_changes
        uses: trilom/file-changes-action@v1.2.4
        with:
          output: ' '
      - name: Install tools
        run: |
          wget https://github.com/mozilla/sops/releases/download/v3.7.1/sops_3.7.1_amd64.deb
          sudo dpkg -i sops_3.7.1_amd64.deb
          sops -v 
      - name: Echo domain
        run: |
          export DOMAIN=${GITHUB_REF##refs/heads/}.open-accessibility.org
          echo $DOMAIN
      - name: Deploy changed client
        if: contains(steps.get_file_changes.outputs.files, 'app/client') || contains(github.event.head_commit.message, 'trigger build')
        run: make deploy -e COMPONENT=client -e NAMESPACE=${GITHUB_REF##refs/heads/} -e DOMAIN=${GITHUB_REF##refs/heads/}.open-accessibility.org
      - name: Deploy changed api
        if: contains(steps.get_file_changes.outputs.files, 'app/api') || contains(github.event.head_commit.message, 'trigger build')
        run: sops -d k8s/api-secrets.sops.yaml > k8s/api-secrets.tpl.yaml && make deploy -e COMPONENT=api -e NAMESPACE=${GITHUB_REF##refs/heads/} -e DOMAIN=${GITHUB_REF##refs/heads/}.open-accessibility.org
      - name: Deploy changed cron
        if: contains(steps.get_file_changes.outputs.files, 'app/cron') || contains(github.event.head_commit.message, 'trigger build')
        run: sops -d k8s/cron-secrets.sops.yaml > k8s/cron-secrets.tpl.yaml && make deploy -e COMPONENT=cron -e NAMESPACE=${GITHUB_REF##refs/heads/} -e DOMAIN=${GITHUB_REF##refs/heads/}.open-accessibility.org
      # - name: Deploy changed database
      #   if: contains(steps.get_file_changes.outputs.files, 'app/database') || contains(github.event.head_commit.message, 'trigger build')
      #   run: sops -d k8s/postgres-secrets.sops.yaml > k8s/postgres-secrets.tpl.yaml && make deploy-postgres-server -e NAMESPACE=${GITHUB_REF##refs/heads/} -e DOMAIN=${GITHUB_REF##refs/heads/}.open-accessibility.org    
      - name: Create namespace if not exist
        run: |
          make setup-kube-config
          kubectl get ns ${GITHUB_REF##refs/heads/} || kubectl create ns ${GITHUB_REF##refs/heads/}
      - name: Install pgo
        run: |
          make setup-kube-config
          curl https://raw.githubusercontent.com/CrunchyData/postgres-operator/v4.5.1/installers/kubectl/client-setup.sh > client-setup.sh 
          chmod +x client-setup.sh
          ./client-setup.sh
      - name: Deploy pgo
        run: |
          kubectl apply -f k8s/postgres-operator.yml
      - name: Create configmaps
        run: |
          sops -d k8s/goat-custom-pg-config.sops.yaml > k8s/goat-custom-pg-config.tpl.yaml
          make build-k8s -e NAMESPACE=${GITHUB_REF##refs/heads/}
          kubectl apply -f k8s/goat-custom-pg-config.yaml
      - name: Create docker secret if not exists
        run: |
          sops -d k8s/docker-registry-secret.sops.yaml > k8s/docker-registry-secret.tpl.yaml
          make build-k8s -e NAMESPACE=${GITHUB_REF##refs/heads/}
          kubectl apply -f k8s/docker-registry-secret.yaml
      - name: Deploy cluster
        run:  |
          kubectl -n pgo port-forward svc/postgres-operator 8443:8443 &
          sleep 5
          export PGOUSER="${HOME?}/.pgo/pgo/pgouser"
          export PGO_CA_CERT="${HOME?}/.pgo/pgo/client.crt"
          export PGO_CLIENT_CERT="${HOME?}/.pgo/pgo/client.crt"
          export PGO_CLIENT_KEY="${HOME?}/.pgo/pgo/client.key"
          export PGO_APISERVER_URL='https://127.0.0.1:8443'
          export PGO_NAMESPACE=pgo
          export PATH=$PATH:${HOME?}/.pgo/pgo
          pgo update namespace ${GITHUB_REF##refs/heads/} 
          pgo create cluster \
          -n ${GITHUB_REF##refs/heads/} goat \
          --metrics \
          --ccp-image-tag centos7-12.5-3.0-4.5.1 \
          --ccp-image crunchy-goat-empeek \
          --ccp-image-prefix docker.io/fufelok